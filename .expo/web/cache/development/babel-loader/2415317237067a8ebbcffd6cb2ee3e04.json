{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"c:\\\\reactRepos\\\\CSCI380_Nutrifetch\\\\components\\\\CameraScanScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Permissions from \"expo-permissions\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport { useNavigation } from '@react-navigation/native';\nexport default function CameraScanScreen(props) {\n  var navigation = useNavigation();\n  return React.createElement(CameraScan, _extends({}, props, {\n    navigation: navigation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 10\n    }\n  }));\n}\n\nvar CameraScan = function (_React$Component) {\n  _inherits(CameraScan, _React$Component);\n\n  var _super = _createSuper(CameraScan);\n\n  function CameraScan(props) {\n    var _this;\n\n    _classCallCheck(this, CameraScan);\n\n    _this = _super.call(this, props);\n\n    _this.getPermissionsAsync = function _callee() {\n      var _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              _this.setState({\n                hasCameraPermission: status === \"granted\"\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handleBarCodeScanned = function (_ref) {\n      var type = _ref.type,\n          data = _ref.data;\n\n      _this.setState({\n        scanned: true\n      });\n\n      _this.props.navigation.navigate('AfterUPCscanned', {\n        title: \"Scan Result\",\n        upc: data\n      });\n    };\n\n    _this.state = {\n      hasCameraPermission: null,\n      scanned: false\n    };\n    return _this;\n  }\n\n  _createClass(CameraScan, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.getPermissionsAsync();\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          hasCameraPermission = _this$state.hasCameraPermission,\n          scanned = _this$state.scanned;\n\n      if (hasCameraPermission === null) {\n        return React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 14\n          }\n        }, \"Requesting for camera permission\");\n      }\n\n      if (hasCameraPermission === false) {\n        return React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 14\n          }\n        }, \"No access to camera\");\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: \"column\",\n          justifyContent: \"flex-end\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, React.createElement(BarCodeScanner, {\n        onBarCodeScanned: scanned ? undefined : this.handleBarCodeScanned,\n        style: StyleSheet.absoluteFillObject,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }\n      }), scanned && React.createElement(Button, {\n        title: \"Tap to Scan Again\",\n        onPress: function onPress() {\n          return _this2.setState({\n            scanned: false\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n\n  return CameraScan;\n}(React.Component);","map":{"version":3,"sources":["c:/reactRepos/CSCI380_Nutrifetch/components/CameraScanScreen.js"],"names":["React","Permissions","BarCodeScanner","useNavigation","CameraScanScreen","props","navigation","CameraScan","getPermissionsAsync","askAsync","CAMERA","status","setState","hasCameraPermission","handleBarCodeScanned","type","data","scanned","navigate","title","upc","state","flex","flexDirection","justifyContent","undefined","StyleSheet","absoluteFillObject","Component"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAgC;AAC7C,MAAMC,UAAU,GAAGH,aAAa,EAAhC;AAEA,SAAO,oBAAC,UAAD,eAAgBE,KAAhB;AAAuB,IAAA,UAAU,EAAEC,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;;IACKC,U;;;;;AACJ,sBAAYF,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAYnBG,mBAZmB,GAYG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACKP,WAAW,CAACQ,QAAZ,CAAqBR,WAAW,CAACS,MAAjC,CADL;;AAAA;AAAA;AACZC,cAAAA,MADY,yBACZA,MADY;;AAEpB,oBAAKC,QAAL,CAAc;AAAEC,gBAAAA,mBAAmB,EAAEF,MAAM,KAAK;AAAlC,eAAd;;AAFoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAZH;;AAAA,UAiBnBG,oBAjBmB,GAiBI,gBAAoB;AAAA,UAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,UAAXC,IAAW,QAAXA,IAAW;;AAEzC,YAAKJ,QAAL,CAAc;AAAEK,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACA,YAAKZ,KAAL,CAAWC,UAAX,CAAsBY,QAAtB,CAA+B,iBAA/B,EAAkD;AAChDC,QAAAA,KAAK,EAAE,aADyC;AAEhDC,QAAAA,GAAG,EAAEJ;AAF2C,OAAlD;AAMD,KA1BkB;;AAEjB,UAAKK,KAAL,GAAa;AACXR,MAAAA,mBAAmB,EAAE,IADV;AAEXI,MAAAA,OAAO,EAAE;AAFE,KAAb;AAFiB;AAMlB;;;;;;;;;AAGC,mBAAKT,mBAAL;;;;;;;;;;;6BAmBO;AAAA;;AAAA,wBACkC,KAAKa,KADvC;AAAA,UACCR,mBADD,eACCA,mBADD;AAAA,UACsBI,OADtB,eACsBA,OADtB;;AAGP,UAAIJ,mBAAmB,KAAK,IAA5B,EAAkC;AAChC,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAP;AACD;;AACD,UAAIA,mBAAmB,KAAK,KAA5B,EAAmC;AACjC,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACD;;AACD,aACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLS,UAAAA,IAAI,EAAE,CADD;AAELC,UAAAA,aAAa,EAAE,QAFV;AAGLC,UAAAA,cAAc,EAAE;AAHX,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOE,oBAAC,cAAD;AACE,QAAA,gBAAgB,EAAEP,OAAO,GAAGQ,SAAH,GAAe,KAAKX,oBAD/C;AAEE,QAAA,KAAK,EAAEY,UAAU,CAACC,kBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,EAYGV,OAAO,IACN,oBAAC,MAAD;AACE,QAAA,KAAK,EAAE,mBADT;AAEE,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACL,QAAL,CAAc;AAAEK,YAAAA,OAAO,EAAE;AAAX,WAAd,CAAN;AAAA,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbJ,CADF;AAqBD;;;;EA3DsBjB,KAAK,CAAC4B,S","sourcesContent":["import * as React from \"react\";\r\nimport { Text, View, StyleSheet, Button } from \"react-native\";\r\nimport * as Permissions from \"expo-permissions\";\r\n\r\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\r\nimport { useNavigation } from '@react-navigation/native';\r\nexport default function CameraScanScreen(props){\r\n  const navigation = useNavigation();\r\n\r\n  return <CameraScan {...props} navigation={navigation}/>;\r\n}\r\nclass CameraScan extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasCameraPermission: null,\r\n      scanned: false,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.getPermissionsAsync();\r\n  }\r\n\r\n  getPermissionsAsync = async () => {\r\n    const { status } = await Permissions.askAsync(Permissions.CAMERA);\r\n    this.setState({ hasCameraPermission: status === \"granted\" });\r\n  };\r\n\r\n  handleBarCodeScanned = ({ type, data }) => {\r\n    // handle the UPC after scanning\r\n    this.setState({ scanned: true });\r\n    this.props.navigation.navigate('AfterUPCscanned', {\r\n      title: \"Scan Result\",\r\n      upc: data,\r\n      // the user profile obj from parent component (home screen)\r\n      // usr_profile: this.props.route.parames.usr_profile,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { hasCameraPermission, scanned } = this.state;\r\n\r\n    if (hasCameraPermission === null) {\r\n      return <Text>Requesting for camera permission</Text>;\r\n    }\r\n    if (hasCameraPermission === false) {\r\n      return <Text>No access to camera</Text>;\r\n    }\r\n    return (\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          flexDirection: \"column\",\r\n          justifyContent: \"flex-end\",\r\n        }}\r\n      >\r\n        <BarCodeScanner\r\n          onBarCodeScanned={scanned ? undefined : this.handleBarCodeScanned}\r\n          style={StyleSheet.absoluteFillObject}\r\n        />\r\n\r\n        {scanned && (\r\n          <Button\r\n            title={\"Tap to Scan Again\"}\r\n            onPress={() => this.setState({ scanned: false })}\r\n          />\r\n        )}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}